#### Output

- hapi can also validate responses before they are sent back to the client.
- This validation is defined in the response property of the route options object.

- If a response does not pass the response validation,
- the client will receive an Internal Server Error (500) response by default (see response.failAction below).

- Output validation is useful for ensuring that your API is serving data
- that is consistent with its documentation/contract.
- Additionally, plugins like hapi-swagger and lout can use the response-validation schemas
- to automatically document each endpoint's output format, thus ensuring that your documentation is always up to date.


- hapi supports quite a few options to fine-tune output validation. Here are a few of them:


*** response.failAction

- You can choose what to do when response validation fails by setting response.failAction to one of the following:

-> error: send an Internal Server Error (500) response (default)
-> log: just log the offense and send the response as-is
-> ignore: take no action and continue processing the request

- A lifcycle method with signature async function(request, h, err)
	where, 	- request is the request object,
					- h is the response toolkit and
					- err is the validation error



*** response.sample
- If performance is a concern, hapi can be configured to validate only a percentage of responses.
- This can be achieved with the response.sample property of the route config.
- It should be set to a number between 0-100, representing the percentage of responses that should be validated.


**** response.status

- Sometimes one endpoint can serve different response objects.
- For instance, a POST route may return one of the following:
		- 201 with the newly created resource if a new resource is created.
		- 202 with the old and new values if an existing resource was updated.

- hapi supports this by allowing you to specify a different validation schema for each response status code.
- response.status is an object with keys that are numeric status codes, and properties that are joi schemas:

{
    response: {
        status: {
            201: dataSchema,
            202: Joi.object({ original: dataSchema, updated:  dataSchema })
        }
    }
}


*** response.options

// Example -

const bookSchema = Joi.object({
    title: Joi.string().required(),
    author: Joi.string().required(),
    isbn: Joi.string().length(10),
    pageCount: Joi.number(),
    datePublished: Joi.date().iso()
});

server.route({
    method: 'GET',
    path: '/books',
    handler: async function (request, h) {

        return await getBooks();
    },
    options: {
        response: {
            sample: 50,
            schema: Joi.array().items(bookSchema)
        }
    }
});
